






<BinaryExpr> ::= <Expr> BINARY_OP <Expr>

<CallExpr> ::= <MemberExpr> LEFT_PAREN <ExprList>? RIGHT_PAREN

<ObjectLiteral> ::= LEFT_BRACE <PropertyList>? RIGHT_BRACE
<Property> ::= IDENTIFIER COLON <Expr>
<PropertyList> ::= <Property> (COMMA <Property>)*

<PrimaryExpr> ::= IDENTIFIER | NUMBER | LEFT_PAREN <Expr> RIGHT_PAREN | <ObjectLiteral>

<ExprList> ::= <Expr> (COMMA <Expr>)*
<ParamList> ::= IDENTIFIER (COMMA IDENTIFIER)*
<Block> ::= LEFT_BRACE <Statement>* RIGHT_BRACE



<Program> ::= <Statement>*

<Statement> ::= <VarDeclaration> | <FuncDeclaration> | <Expr>

<VarDeclaration> ::= (LET | CONST) IDENTIFIER (EQUAL <Expr>)? SEMICOLON

<FuncDeclaration> ::= FN IDENTIFIER LEFT_PAREN <ParamList>? RIGHT_PAREN <Block>

<Expr> ::= <AssignmentExpr>
<AssignmentExpr> ::= <MemberExpr> EQUAL <Expr> | <MemberExpr>
<MemberExpr> ::= <PrimaryExpr> (DOT IDENTIFIER | LEFT_BRACK <Expr> RIGHT_BRACK)*

<BinaryExpr> ::= <Expr> BINARY_OP <Expr>

<CallExpr> ::= <MemberExpr> LEFT_PAREN <ExprList>? RIGHT_PAREN

<ObjectLiteral> ::= LEFT_BRACE <PropertyList>? RIGHT_BRACE
<Property> ::= IDENTIFIER COLON <Expr>
<PropertyList> ::= <Property> (COMMA <Property>)*

<PrimaryExpr> ::= IDENTIFIER | NUMBER | LEFT_PAREN <Expr> RIGHT_PAREN | <ObjectLiteral>

<ExprList> ::= <Expr> (COMMA <Expr>)*
<ParamList> ::= IDENTIFIER (COMMA IDENTIFIER)*
<Block> ::= LEFT_BRACE <Statement>* RIGHT_BRACE


FINAL GRAMMAR 
----------------------------------------------------------------

<Program> ::= <Statement>*

<Statement> ::= <VarDeclaration> | <FuncDeclaration> | <Expr>

<PrimaryExpr> ::= IDENTIFIER | NUMBER | LEFT_PAREN <Expr> RIGHT_PAREN 